Please update the gemm_kernel module to utilize the provided sequential multiplier module instead of the current combinational multiplication. The multiplier has a single-cycle latency, meaning the output p will be valid one clock cycle after inputs a and b are presented.

Here's the multiplier module definition:

```systemverilog
module multiplier #(
    parameter DATA_WIDTH = 32
)(
    input logic reset,
    input logic clk,
    input logic [DATA_WIDTH-1:0] a,
    input logic [DATA_WIDTH-1:0] b,
    output logic [DATA_WIDTH-1:0] p
);
    logic [DATA_WIDTH-1:0] p_reg;
    assign p = p_reg;
    always @(posedge clk) begin
        if (reset) begin
            p_reg <= {DATA_WIDTH{1'b0}};
        end else begin
            p_reg <= a * b;
        end
    end
endmodule
```

To accommodate this latency, introduce a new state named MULTIPLY to the state machine. This MULTIPLY state should be inserted between the READ and COMPUTE states. In the MULTIPLY state, the module should simply wait for the multiplier to produce the result, without performing any other actions.